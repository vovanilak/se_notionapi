from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from bot.keyboards import builders, inline
from aiogram.fsm.context import FSMContext
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
import traceback

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Çüëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –õ–µ–≥–∏–æ–Ω–µ—Ä–∞—Ö –∏ –®—Ç–∞—Ç–Ω—ã—Ö –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–∑ Google Sheets –≤ NotionüöÄ'
    )
    await message.answer(
        text='–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å'
    )

@router.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è',
        reply_markup=builders.reply(
            ('–õ–µ–≥–∏–æ–Ω–µ—Ä', '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫', "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
        )
    )

@router.message(F.text.in_(('–õ–µ–≥–∏–æ–Ω–µ—Ä', '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫')))
async def who(message: Message, state: FSMContext):
    await state.update_data(who=message.text)
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets',
         reply_markup=ReplyKeyboardRemove()
    )

@router.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
async def developer(message: Message):
    await message.answer(
        text='–ö–æ–Ω—Ç–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
        reply_markup=inline.url(
                        text='–ß–∞—Çüì®', 
                        url='https://t.me/vovanilak'
                    )
    )

@router.message(F.text.isdigit())
async def post_notion(message: Message, state: FSMContext):
    from main import (
        Anketa, 
        URL_LIGA, 
        URL_STAFF, 
        NOTION_TOKEN, 
        DATABASE_LIGA,
        DATABASE_LIGA_PERSON,
        DATABASE_STAFF
    )

    a = await state.get_data()
    await message.answer(
        text='–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... –Ø –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!'
    )
    try:
        if a['who'] == '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫':
            person = Anketa(url=URL_STAFF,
                            row=int(message.text),
                            json_file='data/staff.json',
                            start_result_column=11)
            await message.answer(
                text=f'–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {person.name}'
            )
            person.post_to_notion(NOTION_TOKEN, DATABASE_STAFF, title=person.name, column='Name')
            
        elif a['who'] == '–õ–µ–≥–∏–æ–Ω–µ—Ä':
            person = Anketa(url=URL_LIGA,
                            row=int(message.text),
                            json_file='data/short2_back.json',
                            start_result_column=13)
            await message.answer(
                text=f'ID –ª–µ–≥–∏–æ–Ω–µ—Ä–∞: {person.id}'
            )
            
            person.post_liga(
                NOTION_TOKEN, 
                database_result=DATABASE_LIGA, 
                database_person=DATABASE_LIGA_PERSON
                )
        else:
            await cmd_menu(message)

        await message.answer(
            text='–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É',
            reply_markup=inline.url(
                text='–°—Å—ã–ª–∫–∞üîó',
                url=f'https://www.notion.so/s-e/{person.url}'
            )
        )
    except Exception as err:
        #await message.answer(str(err))
        await message.answer(
            text=f'–û—à–∏–±–æ—á–∫–∞...\n{traceback.format_exc()}\n–û–Ω–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞. –ú–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º'
        )
        #await cmd_menu(message)

    await cmd_menu(message)
    
@router.message()
async def error(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    )
    await cmd_menu(message)



