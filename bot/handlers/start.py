from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from bot.keyboards import builders, inline
from aiogram.fsm.context import FSMContext
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
import traceback
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.types import URLInputFile, FSInputFile
import pprint
import os

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Çüëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –õ–µ–≥–∏–æ–Ω–µ—Ä–∞—Ö –∏ –®—Ç–∞—Ç–Ω—ã—Ö –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–∑ Google Sheets –≤ NotionüöÄ'
    )
    await message.answer(
        text='–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å'
    )

@router.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞‚¨áÔ∏è',
        reply_markup=builders.reply(
            ('–õ–µ–≥–∏–æ–Ω–µ—Ä', '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫')
        )
    )

@router.message(F.text.in_((
    ('–õ–µ–≥–∏–æ–Ω–µ—Ä', '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫')
)))
async def who(message: Message, state: FSMContext):
    await state.update_data(who=message.text)
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets',
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
async def developer(message: Message):
    await message.answer(
        text='–ö–æ–Ω—Ç–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
        reply_markup=inline.url(
                        text='–ß–∞—Çüì®', 
                        url='https://t.me/vovanilak'
                    )
    )
@router.message(F.text.isdigit())
async def layer2(message: Message, state: FSMContext):
    await state.update_data(row=int(message.text))
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è',
        reply_markup=builders.reply(
            (('–ü—É–±–ª–∏–∫–∞—Ü–∏—è', '–ì—Ä–∞—Ñ–∏–∫–∏', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')) # –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
        )
    )

@router.message(F.text.in_(('–ü—É–±–ª–∏–∫–∞—Ü–∏—è', '–ì—Ä–∞—Ñ–∏–∫–∏', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'))) # –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
async def post_notion(message: Message, state: FSMContext):
    from main import Anketa

    a = await state.get_data()
    await message.answer(
        text='–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... –Ø –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!',
        reply_markup=ReplyKeyboardRemove()
    )
    try:
        if a['who'] == '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫':

            person = Anketa(url=Anketa.URL_STAFF,
                            row=a['row'],
                            json_file='data/new_version2.json',
                            start_result_column=11)
            await message.answer(
                text=f'–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {person.name}'
            )

        elif a['who'] == '–õ–µ–≥–∏–æ–Ω–µ—Ä':

            person = Anketa(url=Anketa.URL_LIGA,
                            row=a['row'],
                            json_file='data/new_version2.json',
                            start_result_column=13)
            await message.answer(
                text=f'ID –ª–µ–≥–∏–æ–Ω–µ—Ä–∞: {person.id}'
            )

        if message.text == '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã':
            pp = pprint.PrettyPrinter()
            pretty_string = pp.pformat(person.test_result)
            pretty_string2 = pp.pformat(person.test_result_sum)
            await message.answer(
                text=f'{pretty_string}\n\n{pretty_string2}'
            )
        
        #all_files = os.listdir('.')
        #png_files = [f for f in all_files if f.endswith('.png')]

        if message.text == '–ü—É–±–ª–∏–∫–∞—Ü–∏—è':
            await message.answer('–ü–æ–¥–æ–∂–¥–∏ –µ—â—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—É–±–ª–∏–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ notion')
            if a['who'] == '–õ–µ–≥–∏–æ–Ω–µ—Ä':
                res = person.post_liga()

            elif a['who'] == '–®—Ç–∞—Ç–Ω—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫':
                res = person.post_staff()

            await message.answer(
                text=f'–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É',
                reply_markup=inline.url(
                    text='–°—Å—ã–ª–∫–∞üîó',
                    url=res['url']
                )
            )

        if message.text == '–ì—Ä–∞—Ñ–∏–∫–∏':
            png_files = person.uguu_links()
            album_builder = MediaGroupBuilder()
            for filename in png_files:   
                album_builder.add_photo(media=URLInputFile(filename))
            await message.answer_media_group(media=album_builder.build())

    except Exception as err:
        #await message.answer(str(err))
        await message.answer(
            text=f'–û—à–∏–±–æ—á–∫–∞...\n{traceback.format_exc()[:4000]}'
        )
        #await cmd_menu(message)

    await cmd_menu(message)
    
@router.message()
async def error(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    )
    await cmd_menu(message)



